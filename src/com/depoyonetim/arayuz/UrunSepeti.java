/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.depoyonetim.arayuz;

import com.depoyonetim.islemler.*;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ASUS
 */
public class UrunSepeti extends javax.swing.JFrame {

    VeriIslemleri veriIslemleri = new VeriIslemleri();
    DefaultTableModel cartModel = new DefaultTableModel();
    VeriTabaniBaglantisi veriTabaniBaglantisi = new VeriTabaniBaglantisi();
    Object[] cartColumn = {"Id", "Barkod No", "Ürün Adı", "Stok Adedi", "Kategori", "Marka", "Alış (TL)", "Satış (TL)", "Raf No", "Alt Raf No", "Müşteri Adı"};
    Object[] cartRow = new Object[11];
    Object[] price = new Object[1];
    String saleId;
    String saleCustomer;
    String dateString = veriIslemleri.dateString();
    int dateInteger = veriIslemleri.dateInteger();
    static String nowDate;
    private String selectedId;
    private String selectedStock;
    static double totalPrice;
    static int rowCount;
    int productStockAmount;

    public String getSelectedId() {
        return selectedId;
    }

    public void setSelectedId(String selectedId) {
        this.selectedId = selectedId;
    }

    public String getSelectedStock() {
        return selectedStock;
    }

    public void setSelectedStock(String selectedStock) {
        this.selectedStock = selectedStock;
    }

    /**
     * Creates new form UrunSepeti
     */
    public UrunSepeti() {
        saleCustomer = new SatisSayfasi().customer;
        initComponents();
        updateCartable();
        totalPrice();
        rowCount();
        this.setLocation(veriIslemleri.StartScreenLocation(this.getBounds().getSize()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        emptyCart = new javax.swing.JButton();
        deleteProductBtn = new javax.swing.JButton();
        updateCartAmount = new javax.swing.JButton();
        payBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        totalCart = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        cartTable = new javax.swing.JTable();
        cartProductAmount = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        errorMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ürün Sepeti");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        emptyCart.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        emptyCart.setText("Sepeti Boşalt");
        emptyCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emptyCartActionPerformed(evt);
            }
        });

        deleteProductBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        deleteProductBtn.setText("Ürün Sil");
        deleteProductBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProductBtnActionPerformed(evt);
            }
        });

        updateCartAmount.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        updateCartAmount.setText("Ürün Adedi Güncelle");
        updateCartAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCartAmountActionPerformed(evt);
            }
        });

        payBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        payBtn.setText("Ödeme Yap");
        payBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Sepet Toplamı :");

        totalCart.setFont(new java.awt.Font("Arial", 1, 30)); // NOI18N
        totalCart.setText("0 TL");

        cartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        cartTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cartTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(cartTable);

        cartProductAmount.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        cartProductAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Ürün Adedi :");

        errorMessage.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        errorMessage.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(errorMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 994, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(updateCartAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteProductBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(emptyCart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(payBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(totalCart, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addComponent(cartProductAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(errorMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(emptyCart)
                        .addGap(18, 18, 18)
                        .addComponent(deleteProductBtn)
                        .addGap(18, 18, 18)
                        .addComponent(updateCartAmount)
                        .addGap(18, 18, 18)
                        .addComponent(payBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cartProductAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(totalCart)))
                .addGap(9, 9, 9))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void emptyCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emptyCartActionPerformed
        String sorgu = "DELETE FROM cart";
        veriTabaniBaglantisi.sil(sorgu);
        updateCartable();
        totalPrice();
    }//GEN-LAST:event_emptyCartActionPerformed

    private void cartTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cartTableMouseClicked
        setSelectedId(cartModel.getValueAt(cartTable.getSelectedRow(), 0).toString());
        setSelectedStock(cartModel.getValueAt(cartTable.getSelectedRow(), 3).toString());
        cartProductAmount.setValue(Integer.valueOf(getSelectedStock()));
    }//GEN-LAST:event_cartTableMouseClicked

    private void deleteProductBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteProductBtnActionPerformed
        String sorgu = "DELETE FROM cart WHERE id=" + Integer.valueOf(getSelectedId());
        veriTabaniBaglantisi.sil(sorgu);
        updateCartable();
        totalPrice();
    }//GEN-LAST:event_deleteProductBtnActionPerformed

    private void updateCartAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCartAmountActionPerformed
        String sorgu = "UPDATE `cart` SET `StockAmount` = '" + cartProductAmount.getValue() + "' WHERE `cart`.`Id` =" + Integer.valueOf(getSelectedId());
        veriTabaniBaglantisi.guncelle(sorgu);
        updateCartable();
        totalPrice();
    }//GEN-LAST:event_updateCartAmountActionPerformed
    public void stockRemoval() {
        int sayi = cartTable.getRowCount();
        String barcodeString;
        String donusecek;
        int cartStockAmount;
        for (int i = 0; i < sayi; i++) {
            barcodeString = cartTable.getValueAt(i, 1).toString();
            donusecek = cartTable.getValueAt(i, 3).toString();
            cartStockAmount = Integer.valueOf(donusecek);
            String stokCekSorgu = "SELECT StockAmount FROM productlist WHERE BarcodeNo=" + barcodeString;
            ResultSet stockRs = veriTabaniBaglantisi.baglanti(stokCekSorgu);

            try {
                while (stockRs.next()) {
                    productStockAmount = Integer.valueOf(stockRs.getString("StockAmount"));
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }

            int updateStockAmount = productStockAmount - cartStockAmount;

            String updateSorgu = "UPDATE `productlist` SET `StockAmount` = '" + updateStockAmount + "' WHERE `BarcodeNo` ='" + barcodeString + "'";
            veriTabaniBaglantisi.guncelle(updateSorgu);
            System.out.println("Stok Düşüldü");

        }
    }

    public void sendProductsDB() {
        int sayi = cartTable.getRowCount();
        System.out.println(sayi);
        for (int i = 0; i < sayi; i++) {
            String id = cartTable.getValueAt(i, 0).toString();
            String barcodeNo = cartTable.getValueAt(i, 1).toString();
            String productName = cartTable.getValueAt(i, 2).toString();
            String stockAmount = cartTable.getValueAt(i, 3).toString();
            String category = cartTable.getValueAt(i, 4).toString();
            String brand = cartTable.getValueAt(i, 5).toString();
            String purchasePrice = cartTable.getValueAt(i, 6).toString();
            String salePrice = cartTable.getValueAt(i, 7).toString();
            String shelfNo = cartTable.getValueAt(i, 8).toString();
            String bottomShelfNo = cartTable.getValueAt(i, 9).toString();

            String satilanUrunlerSorgu = "INSERT INTO `saleproducts` (`Id`, `CustomerName`, `BarcodeNo`, `ProductName`, `StockAmount`, `Category`, `Brand`, `PurchasePrice`, `SalePrice`, `ShelfNo`, `BottomShelfNo`, `Date`, `DateCode`) VALUES ('" + id + "', '" + saleCustomer + "', '" + barcodeNo + "', '" + productName + "', '" + stockAmount + "', '" + category + "', '" + brand + "', '" + purchasePrice + "', '" + salePrice + "', '" + shelfNo + "', '" + bottomShelfNo + "', '" + dateString + "','" + dateInteger + "')";
            veriTabaniBaglantisi.ekle(satilanUrunlerSorgu);
            System.out.println("Ürünler Satılan ÜRünler VT'nına Gönderildi");
        }

    }
    private void payBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payBtnActionPerformed
        int cartTableCount = cartTable.getRowCount();
        if (cartTableCount == 0) {
            errorMessage.setText("Lütfen Sepete Ürün Ekleyin");
        } else {
            String Sorgu = "INSERT INTO `sales` (`Id`, `CustomerName`, `SaleAmount`, `TotalPrice`, `SellerName`, `Date`, `DateCode`) VALUES (NULL, '" + saleCustomer + "', '" + rowCount + "', '" + totalPrice + "', '" + new KullaniciGirisi().userNameTxt + "', '" + dateString + "','" + dateInteger + "')";
            veriTabaniBaglantisi.ekle(Sorgu);
            stockRemoval();
            sendProductsDB();
            veriTabaniBaglantisi.sil("DELETE FROM cart");
            cartModel.setRowCount(0);

        }

        totalCart.setText("0 TL");
    }//GEN-LAST:event_payBtnActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public void totalPrice() {
        if (cartTable.getRowCount() == 0) {
            totalCart.setText("0 TL");
            return;
        } else {
            String sorgu = "SELECT * FROM cart";
            ResultSet priceRs = veriTabaniBaglantisi.baglanti(sorgu);
            double totalCartPrice = 0;
            try {
                while (priceRs.next()) {
                    double price = Double.valueOf(priceRs.getString("SalePrice"));
                    int amount = Integer.valueOf(priceRs.getString("StockAmount"));
                    totalCartPrice += (price * amount);
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            // Silinecek - new DecimalFormat("###,###.##").format(totalCartPrice);
            String totalCartPriceString = new DecimalFormat("###,###.##").format(totalCartPrice);
            totalCart.setText(totalCartPriceString + " TL");
            totalPrice = totalCartPrice;
        }
    }

    public void rowCount() {
        rowCount = cartTable.getRowCount();
    }

    public void updateCartable() {
        cartModel.setRowCount(0);
        String sorgu = "SELECT * FROM cart";
        ResultSet cartRs = veriTabaniBaglantisi.baglanti(sorgu);
        cartModel.setColumnIdentifiers(cartColumn);
        try {
            while (cartRs.next()) {
                cartRow[0] = cartRs.getString("Id");
                cartRow[1] = cartRs.getString("BarcodeNo");
                cartRow[2] = cartRs.getString("ProductName");
                cartRow[3] = cartRs.getString("StockAmount");
                cartRow[4] = cartRs.getString("Category");
                cartRow[5] = cartRs.getString("Brand");
                double purchasePrice = Double.valueOf(cartRs.getString("PurchasePrice"));
                cartRow[6] = veriIslemleri.priceFormat(purchasePrice);
                double salePrice = Double.valueOf(cartRs.getString("SalePrice"));
                cartRow[7] = veriIslemleri.priceFormat(salePrice);
                cartRow[8] = cartRs.getString("ShelfNo");
                cartRow[9] = cartRs.getString("BottomShelfNo");
                cartRow[10] = cartRs.getString("CustomerName");
                cartModel.addRow(cartRow);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        cartTable.setModel(cartModel);
    }

    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UrunSepeti.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UrunSepeti.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UrunSepeti.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UrunSepeti.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UrunSepeti().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner cartProductAmount;
    private javax.swing.JTable cartTable;
    private javax.swing.JButton deleteProductBtn;
    private javax.swing.JButton emptyCart;
    private javax.swing.JLabel errorMessage;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton payBtn;
    private javax.swing.JLabel totalCart;
    private javax.swing.JButton updateCartAmount;
    // End of variables declaration//GEN-END:variables
}
